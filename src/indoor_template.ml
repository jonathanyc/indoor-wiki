open Indoor_util

let headers = [
  `Css, "css/normalize.css";
  `Css, "css/style.css";
  `Css, "css/xcode.css";
  `Js, "js/jquery-1.11.3.min.js";
  `Js, "js/jquery.hotkeys.js";
  `Js, "js/highlight.pack.js";
  `Js, "js/instantclick.min.js";
  `Js, "js/main.js";
]

(* [base ?head ~title body] renders the base template for Indoor wiki.
   This means the components of head and body that are included on every page of the site.
   [head] and [body] are spliced into their respective locations to allow
   building on top of the base template. *)
let base ?(head=`List []) ~title body =
  let { Indoor_config.title=wiki_title; wiki_path; highlight; mathjax; links } = get_key_exn Indoor_config.key in
  let headers = if highlight then (`Js, "js/highlight.pack.js") :: headers else headers in
  let headers = if mathjax then (`JsAbs, Indoor_config.mathjax_src) :: headers else headers in
  [%sfxp
    '\'',
    (html ((@) (lang "en"))
       (head
          (title [%string title])
          (* Not sure if it's in the spec, but browsers expect this not to be
             composed of character references. *)
          (meta ((@) ((RAW charset) "utf-8")))
          (* Insert <script>s and <css>s. Raw because we generate this from the admin's config. *)
          (RAW
             [%spls
               headers
               |> List.map
                 (function
                   | `Css, href -> 
                     let href' = "/" ^ Indoor_path.(Indoor_config.static_access_path /$ href) in
                     [%sfxp '\'', (link ((@) (rel "stylesheet") (type' "text/css") (media "all") (href [%string href'])))]
                   | `Js, src ->
                     let src' = "/" ^ Indoor_path.(Indoor_config.static_access_path /$ src) in
                     [%sexp (script ((@) (src [%string src']) ("data-no-instant" "")) "")]
                   | `JsAbs, src ->
                     [%sexp (script ((@) (src [%string src]) ("data-no-instant" "")) "")])])
          (* Include the provided [head]. *)
          [%sp head])
       (body
          (header
             (span ((@) (id "title")) [%string wiki_title])
             (* Build the top bar links. *)
             [%spls
               links
               |> List.map
                 (fun (label, url) ->
                    [%sexp (a ((@) (href [%string url])) [%string label])])])
          [%sp body]))]

let breadcrumbs ~content crumbs =
  let { Indoor_config.root_name } = get_key_exn Indoor_config.key in
  let crumbs = root_name :: crumbs in
  let n = List.length crumbs in
  crumbs
  |> List.fold_left
    (fun (sexps, path, i) crumb ->
       let href = if i = 1 then "/" else path ^ crumb ^ "/" in
       let id = if i = n - 1 || n = 1 then [[%sexp (id "parent-directory-entry")]] else [] in
       [%sexp (a ((@) (href [%string href]) [%spls id]) [%string crumb])] :: sexps,
       (if i = 1 then "/" else path ^ crumb ^ "/"), i + 1)
    ([], "/", 1)
  |> (function | (x, _, _) -> x) 
  |> List.rev
  |> intersperse ~tail:true [%sexp "/"]

let index ~title ~dt ~files ~root () = 
  let render_file i file =
    let i = i + 1 in
    let id = Printf.sprintf "directory-entry-%d" i in
    let href, text =
      match file with
      | Indoor_fs.Directory (d, _) ->
        Indoor_path.(!$ (root / d) ^ "/"),
        Indoor_path.(!$ d ^ "/")
      | Indoor_fs.File path -> 
        Indoor_path.(!$ (root / path)),
        Indoor_path.(!$ path)
    in [%sexp (li (p (a ((@) (href [%string "/" ^ href]) (id [%string id])) [%string text])))]
  in
  [%sfxp
    '\'', 
    (h1 ((@) (class' "current-directory"))
       [%spls breadcrumbs ~content:false Indoor_path.(parts root)]) 
    [%sp
       if files <> [] then 
         [%sexp
           (* It's a little tricky. We use [ol ...] instead of (ol ...) because we are splicing it. *)
           [ol ((@) (id "directory-listing"))
              [%spls List.mapi render_file files]]]
       else
         [%sexp [p (em "Empty.")]]]
    (p (i "Rendered in " [%string Printf.sprintf "%.5f" dt] " seconds."))]
  |> base ~title

let page ~dirs ~title ~contents =
  [%sfxp
    '\'',
    (h2 ((@) (class' "current-directory current-directory-small"))
       [%spls breadcrumbs ~content:true dirs]
       [%string title])
    (* Raw because [contents] is HTML generated by omd that we expect to be clean. *)
    (RAW [%string contents])]
  |> base ~title
